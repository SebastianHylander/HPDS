// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SendClientMessage_SendClientMessage_FullMethodName = "/SendClientMessage/SendClientMessage"
)

// SendClientMessageClient is the client API for SendClientMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendClientMessageClient interface {
	SendClientMessage(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*Empty, error)
}

type sendClientMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewSendClientMessageClient(cc grpc.ClientConnInterface) SendClientMessageClient {
	return &sendClientMessageClient{cc}
}

func (c *sendClientMessageClient) SendClientMessage(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SendClientMessage_SendClientMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendClientMessageServer is the server API for SendClientMessage service.
// All implementations must embed UnimplementedSendClientMessageServer
// for forward compatibility
type SendClientMessageServer interface {
	SendClientMessage(context.Context, *ClientMessage) (*Empty, error)
	mustEmbedUnimplementedSendClientMessageServer()
}

// UnimplementedSendClientMessageServer must be embedded to have forward compatible implementations.
type UnimplementedSendClientMessageServer struct {
}

func (UnimplementedSendClientMessageServer) SendClientMessage(context.Context, *ClientMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClientMessage not implemented")
}
func (UnimplementedSendClientMessageServer) mustEmbedUnimplementedSendClientMessageServer() {}

// UnsafeSendClientMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendClientMessageServer will
// result in compilation errors.
type UnsafeSendClientMessageServer interface {
	mustEmbedUnimplementedSendClientMessageServer()
}

func RegisterSendClientMessageServer(s grpc.ServiceRegistrar, srv SendClientMessageServer) {
	s.RegisterService(&SendClientMessage_ServiceDesc, srv)
}

func _SendClientMessage_SendClientMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendClientMessageServer).SendClientMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendClientMessage_SendClientMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendClientMessageServer).SendClientMessage(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// SendClientMessage_ServiceDesc is the grpc.ServiceDesc for SendClientMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendClientMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SendClientMessage",
	HandlerType: (*SendClientMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendClientMessage",
			Handler:    _SendClientMessage_SendClientMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}

const (
	Connect_ConnectClient_FullMethodName = "/Connect/ConnectClient"
)

// ConnectClient is the client API for Connect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectClient interface {
	ConnectClient(ctx context.Context, in *Connection, opts ...grpc.CallOption) (Connect_ConnectClientClient, error)
}

type connectClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectClient(cc grpc.ClientConnInterface) ConnectClient {
	return &connectClient{cc}
}

func (c *connectClient) ConnectClient(ctx context.Context, in *Connection, opts ...grpc.CallOption) (Connect_ConnectClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &Connect_ServiceDesc.Streams[0], Connect_ConnectClient_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &connectConnectClientClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connect_ConnectClientClient interface {
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type connectConnectClientClient struct {
	grpc.ClientStream
}

func (x *connectConnectClientClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectServer is the server API for Connect service.
// All implementations must embed UnimplementedConnectServer
// for forward compatibility
type ConnectServer interface {
	ConnectClient(*Connection, Connect_ConnectClientServer) error
	mustEmbedUnimplementedConnectServer()
}

// UnimplementedConnectServer must be embedded to have forward compatible implementations.
type UnimplementedConnectServer struct {
}

func (UnimplementedConnectServer) ConnectClient(*Connection, Connect_ConnectClientServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectClient not implemented")
}
func (UnimplementedConnectServer) mustEmbedUnimplementedConnectServer() {}

// UnsafeConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectServer will
// result in compilation errors.
type UnsafeConnectServer interface {
	mustEmbedUnimplementedConnectServer()
}

func RegisterConnectServer(s grpc.ServiceRegistrar, srv ConnectServer) {
	s.RegisterService(&Connect_ServiceDesc, srv)
}

func _Connect_ConnectClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Connection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectServer).ConnectClient(m, &connectConnectClientServer{stream})
}

type Connect_ConnectClientServer interface {
	Send(*ServerMessage) error
	grpc.ServerStream
}

type connectConnectClientServer struct {
	grpc.ServerStream
}

func (x *connectConnectClientServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

// Connect_ServiceDesc is the grpc.ServiceDesc for Connect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Connect",
	HandlerType: (*ConnectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectClient",
			Handler:       _Connect_ConnectClient_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}

const (
	Disconnect_DisconnectClient_FullMethodName = "/Disconnect/DisconnectClient"
)

// DisconnectClient is the client API for Disconnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisconnectClient interface {
	DisconnectClient(ctx context.Context, in *Disconnection, opts ...grpc.CallOption) (*Empty, error)
}

type disconnectClient struct {
	cc grpc.ClientConnInterface
}

func NewDisconnectClient(cc grpc.ClientConnInterface) DisconnectClient {
	return &disconnectClient{cc}
}

func (c *disconnectClient) DisconnectClient(ctx context.Context, in *Disconnection, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Disconnect_DisconnectClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisconnectServer is the server API for Disconnect service.
// All implementations must embed UnimplementedDisconnectServer
// for forward compatibility
type DisconnectServer interface {
	DisconnectClient(context.Context, *Disconnection) (*Empty, error)
	mustEmbedUnimplementedDisconnectServer()
}

// UnimplementedDisconnectServer must be embedded to have forward compatible implementations.
type UnimplementedDisconnectServer struct {
}

func (UnimplementedDisconnectServer) DisconnectClient(context.Context, *Disconnection) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectClient not implemented")
}
func (UnimplementedDisconnectServer) mustEmbedUnimplementedDisconnectServer() {}

// UnsafeDisconnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisconnectServer will
// result in compilation errors.
type UnsafeDisconnectServer interface {
	mustEmbedUnimplementedDisconnectServer()
}

func RegisterDisconnectServer(s grpc.ServiceRegistrar, srv DisconnectServer) {
	s.RegisterService(&Disconnect_ServiceDesc, srv)
}

func _Disconnect_DisconnectClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Disconnection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisconnectServer).DisconnectClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Disconnect_DisconnectClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisconnectServer).DisconnectClient(ctx, req.(*Disconnection))
	}
	return interceptor(ctx, in, info, handler)
}

// Disconnect_ServiceDesc is the grpc.ServiceDesc for Disconnect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Disconnect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Disconnect",
	HandlerType: (*DisconnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisconnectClient",
			Handler:    _Disconnect_DisconnectClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
