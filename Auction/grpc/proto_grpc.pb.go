// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuctionSystem_MakeBid_FullMethodName     = "/AuctionSystem/MakeBid"
	AuctionSystem_GetResult_FullMethodName   = "/AuctionSystem/GetResult"
	AuctionSystem_RunElection_FullMethodName = "/AuctionSystem/RunElection"
)

// AuctionSystemClient is the client API for AuctionSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionSystemClient interface {
	MakeBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Ack, error)
	GetResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error)
	RunElection(ctx context.Context, in *ElectionStatus, opts ...grpc.CallOption) (*Empty, error)
}

type auctionSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionSystemClient(cc grpc.ClientConnInterface) AuctionSystemClient {
	return &auctionSystemClient{cc}
}

func (c *auctionSystemClient) MakeBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, AuctionSystem_MakeBid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionSystemClient) GetResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, AuctionSystem_GetResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionSystemClient) RunElection(ctx context.Context, in *ElectionStatus, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuctionSystem_RunElection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctionSystemServer is the server API for AuctionSystem service.
// All implementations must embed UnimplementedAuctionSystemServer
// for forward compatibility
type AuctionSystemServer interface {
	MakeBid(context.Context, *Bid) (*Ack, error)
	GetResult(context.Context, *Empty) (*Result, error)
	RunElection(context.Context, *ElectionStatus) (*Empty, error)
	mustEmbedUnimplementedAuctionSystemServer()
}

// UnimplementedAuctionSystemServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionSystemServer struct {
}

func (UnimplementedAuctionSystemServer) MakeBid(context.Context, *Bid) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBid not implemented")
}
func (UnimplementedAuctionSystemServer) GetResult(context.Context, *Empty) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedAuctionSystemServer) RunElection(context.Context, *ElectionStatus) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunElection not implemented")
}
func (UnimplementedAuctionSystemServer) mustEmbedUnimplementedAuctionSystemServer() {}

// UnsafeAuctionSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionSystemServer will
// result in compilation errors.
type UnsafeAuctionSystemServer interface {
	mustEmbedUnimplementedAuctionSystemServer()
}

func RegisterAuctionSystemServer(s grpc.ServiceRegistrar, srv AuctionSystemServer) {
	s.RegisterService(&AuctionSystem_ServiceDesc, srv)
}

func _AuctionSystem_MakeBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionSystemServer).MakeBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionSystem_MakeBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionSystemServer).MakeBid(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionSystem_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionSystemServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionSystem_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionSystemServer).GetResult(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionSystem_RunElection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionSystemServer).RunElection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionSystem_RunElection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionSystemServer).RunElection(ctx, req.(*ElectionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// AuctionSystem_ServiceDesc is the grpc.ServiceDesc for AuctionSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuctionSystem",
	HandlerType: (*AuctionSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeBid",
			Handler:    _AuctionSystem_MakeBid_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _AuctionSystem_GetResult_Handler,
		},
		{
			MethodName: "RunElection",
			Handler:    _AuctionSystem_RunElection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
